<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/jdbc  
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

	<!-- 启用spring mvc 注解 -->
	<context:annotation-config />
	<!-- 静态资源的访问 -->
	<!-- <mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/font/**" location="/font/" />
	<mvc:resources mapping="/icons/**" location="/icons/" />
	<mvc:resources mapping="/fonts/**" location="/fonts/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/lib/**" location="/lib/" />
	<mvc:resources mapping="/*.html" location="/" />
	<mvc:resources mapping="/style/**" location="/style/" />
	<mvc:resources mapping="/template/**" location="/template/" />
	<mvc:resources mapping="/view/**" location="/view/" />
	<mvc:resources mapping="/*.ico" location="/" /> -->
	<!-- <mvc:resources mapping="/swagger/**" location="/WEB-INF/swagger/"/> -->
	<!--<mvc:resources mapping="/**" location="/" />-->
    <mvc:resources location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"/>
	<mvc:resources mapping="/appimages/**" location="file://${upload.path}/appimages/" />
	<!--<mvc:annotation-driven />-->
	<mvc:annotation-driven>
		<!-- 处理responseBody 里面日期类型 -->
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 设置使用注解的类所在的jar包 -->
	<!-- <context:component-scan base-package="com.harmonycloud"></context:component-scan> -->
	
	
    <!-- 使用Annotation自动注册Bean,扫描@Controller和@ControllerAdvice-->
	<context:component-scan base-package="com.harmonycloud,springfox" use-default-filters="false">
    <!-- base-package 如果多个，用“,”分隔 -->
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    <!--控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常-->
    <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
</context:component-scan>
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/font/**" />
			<mvc:exclude-mapping path="/icons/**" />
			<mvc:exclude-mapping path="/fonts/*" />
			<mvc:exclude-mapping path="/images/**" />
			<mvc:exclude-mapping path="/lib/**" />
			<mvc:exclude-mapping path="/*.html" />
			<mvc:exclude-mapping path="/style/**" />
			<mvc:exclude-mapping path="/template/**" />
			<mvc:exclude-mapping path="/view/**" />
			<mvc:exclude-mapping path="/*.ico" />
			<bean class="com.harmonycloud.interceptors.AuthInterceptor"></bean>
		</mvc:interceptor>
		<!-- <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/js/**" />
            <mvc:exclude-mapping path="/css/**" />
            <mvc:exclude-mapping path="/font/**" />
            <mvc:exclude-mapping path="/icons/**" />
            <mvc:exclude-mapping path="/fonts/*" />
            <mvc:exclude-mapping path="/images/**" />
            <mvc:exclude-mapping path="/lib/**" />
            <mvc:exclude-mapping path="/*.html" />
            <mvc:exclude-mapping path="/style/**" />
            <mvc:exclude-mapping path="/template/**" />
            <mvc:exclude-mapping path="/view/**" />
            <mvc:exclude-mapping path="/*.ico" />
            <mvc:exclude-mapping path="/notification/**"/>
            <bean class="com.harmonycloud.controller.interceptors.HttpAccessInterceptor"></bean>
        </mvc:interceptor> -->
	</mvc:interceptors>
	<!--<bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">-->
		<!--<property name="maxInactiveIntervalInSeconds" value="1800"/>-->
	<!--</bean>-->
	<!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
		<!--<property name="maxTotal" value="100"/>-->
		<!--<property name="maxIdle" value="10"/>-->
	<!--</bean>-->
	<!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">-->
		<!--<property name="hostName" value="${redis.host}"/>-->
		<!--<property name="port" value="${redis.port}"/>-->
		<!--<property name="password" value="${redis.password}"/>-->
		<!--<property name="timeout" value="3000"/>-->
		<!--<property name="usePool" value="true"/>-->
		<!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
	<!--</bean>-->
	<bean id="stringHttpMessageConverter"
		  class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
				<!--<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>-->
				<bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
				<ref bean="stringHttpMessageConverter"/>
			</list>
		</property>
	</bean>
    
	<bean class="springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration" id="swagger2Config"/> 
    <bean id="simpleMappingExceptionResolver"
			class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
			<property name="exceptionMappings">
				<map>
					<entry key="K8sAuthException" value="k8sAuthException" />
					<!-- <entry key="InvalidCreditCardException" value="creditCardError" /> -->
				</map>
			</property>
			<!-- Override name of exception attribute. Default is 'exception'. -->
			<!-- <property name="exceptionAttribute" value="ex" /> -->

			<!-- Name of logger to use to log exceptions. Unset by default, so logging 
				disabled -->
			<!-- <property name="warnLogCategory" value="example.MvcLogger" /> -->

			<!-- Normally Spring MVC has no default error view and this class is the 
				only way to define one. A nice feature of Spring Boot is the ability to provide 
				a very basic default error view (otherwise the application server typically 
				returns a Java stack trace which is not acceptable in production). See Blog 
				for more details. -->

			<!-- To stick with the Spring Boot approach, DO NOT set this property 
				of SimpleMappingExceptionResolver. -->

			<!-- Here we are choosing to use SimpleMappingExceptionResolver since 
				many Spring applications have used the approach since Spring V1. Normally 
				we would specify the view as "error" to match Spring Boot, however so you 
				can see what is happening, we are using a different page. -->
			<!-- <property name="defaultErrorView" value="defaultErrorPage" /> -->

		</bean>
		
   <!--  <bean id="handlerExceptionResolver" class="com.harmonycloud.k8s.util.CustomExceptionResolver"/> -->
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/" p:suffix=".html" />
    <aop:aspectj-autoproxy/>

</beans>
