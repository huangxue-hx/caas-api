apiVersion: v1
data:
  cloudterminal.js: "var t;\n\nif (typeof Object.assign != 'function') {\n    // Must
    be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object,
    \"assign\", {\n      value: function assign(target, varArgs) { // .length of function
    is 2\n        'use strict';\n        if (target == null) { // TypeError if undefined
    or null\n          throw new TypeError('Cannot convert undefined or null to object');\n
    \       }\n  \n        var to = Object(target);\n  \n        for (var index =
    1; index < arguments.length; index++) {\n          var nextSource = arguments[index];\n
    \ \n          if (nextSource != null) { // Skip over if undefined or null\n            for
    (var nextKey in nextSource) {\n              // Avoid bugs when hasOwnProperty
    is shadowed\n              if (Object.prototype.hasOwnProperty.call(nextSource,
    nextKey)) {\n                to[nextKey] = nextSource[nextKey];\n              }\n
    \           }\n          }\n        }\n        return to;\n      },\n      writable:
    true,\n      configurable: true\n    });\n  }\n\nfunction init(){\n    hterm.defaultStorage
    = new lib.Storage.Memory();\n    \n    t = new hterm.Terminal(\"cloudterm\");\n
    \   \n    t.getPrefs().set(\"send-encoding\", \"utf-8\");\n    t.getPrefs().set(\"receive-encoding\",
    \"utf-8\");\n    \n    // t.getPrefs().set(\"use-default-window-copy\", true);\n
    \   t.getPrefs().set(\"clear-selection-after-copy\", true);\n    t.getPrefs().set(\"copy-on-select\",
    true);\n    t.getPrefs().set(\"ctrl-c-copy\", true);\n    t.getPrefs().set(\"ctrl-v-paste\",
    true);\n    // t.getPrefs().set(\"cursor-color\", \"black\");\n    // t.getPrefs().set(\"background-color\",
    \"white\");\n    // t.getPrefs().set(\"font-size\", 12);\n    // t.getPrefs().set(\"foreground-color\",
    \"black\");\n    // t.getPrefs().set(\"cursor-blink\", false);\n    // t.getPrefs().set(\"scrollbar-visible\",
    true);\n    // t.getPrefs().set(\"scroll-wheel-move-multiplier\", 0.1);\n    //
    t.getPrefs().set(\"user-css\", \"/afx/resource/?p=css/hterm.css\");\n    t.getPrefs().set(\"enable-clipboard-notice\",
    true);\n    \n    t.onTerminalReady = function () {\n    \n        app.onTerminalInit();\n
    \   \n        var io = t.io.push();\n    \n        io.onVTKeystroke = function
    (str) {\n            app.onCommand(str);\n        };\n    \n        io.sendString
    = io.onVTKeystroke;\n    \n        io.onTerminalResize = function (columns, rows)
    {\n            app.resizeTerminal(columns, rows);\n        };\n    \n        t.installKeyboard();\n
    \       app.onTerminalReady();\n    \n    };\n}\nvar params =[];\nfunction UrlSearch()
    {\n    var name,value;\n    var str=location.href; //取得整个地址栏\n    var num=str.indexOf(\"?\")\n
    \   str=str.substr(num+1); //取得所有参数   stringvar.substr(start [, length ]\n \n
    \   var arr=str.split(\"&\"); //各个参数放到数组里\n     //console.log(arr)\n    for(var
    i=0;i < arr.length;i++){\n         num=arr[i].indexOf(\"=\");\n         if(num>0){\n
    \             value=arr[i].substr(num+1);\n              params.push(value);\n
    \        }\n    }\n\n }\n UrlSearch();\n var ws;\nswitch(params[0]){\n    case
    'containerLog':\n        ws = new WebSocket('ws://10.10.103.40:30088/wsmars/terminal?terminalType=stdoutlog&pod='
    + params[1] + '&namespace=' + params[2] + '&container=' + params[3] + '&clusterId='
    + params[4]);\n        break;    \n    case 'appFileLog':\n        ws = new WebSocket('ws://10.10.103.40:30088/wsmars/terminal?terminalType=filelog&pod='
    + params[1] + '&namespace=' + params[2] + '&logDir=' + params[3] + '&logFile='
    + params[4] + '&clusterId=' + params[5]);\n        break;\n    default:\n        ws
    = new WebSocket(\"ws://10.10.103.40:30088/wsmars/terminal?scriptType=\"+params[0]+\"&container=\"+params[1]+\"&pod=\"+params[2]+\"&namespace=\"+params[3]+\"&clusterId=\"+params[4]);\n
    \       break;\n}\n\nws.onopen = function() {\n    init();\n    t.decorate(document.querySelector('#terminal'));\n
    \   t.showOverlay(\"连接成功\", 1000);\n}\n\nws.onerror = function() {\n    t.showOverlay(\"Connection
    error\", 3000);\n}\n\nws.onclose = function(){\n    t.showOverlay(\"Connection
    closed\", 3000);\n}\n\nws.onmessage = function(e) {\n    let data = JSON.parse(e.data);\n
    \   switch (data.type) {\n        case \"TERMINAL_PRINT\":\n            t.io.print(data.text);\n
    \   }\n}\n\nfunction action(type, data) {\n    let action = Object.assign({\n
    \       type: type\n    }, data);\n\n    return JSON.stringify(action);\n}\n\nlet
    app = {\n    onTerminalInit: function() {\n        ws.send(action(\"TERMINAL_INIT\"));\n
    \   },\n    onCommand: function(command) {\n        ws.send(action(\"TERMINAL_COMMAND\",
    {\n            command: command\n        }));\n    },\n    resizeTerminal: function(columns,
    rows) {\n        ws.send(action(\"TERMINAL_RESIZE\", {\n            columns: columns,
    \n            rows: rows\n        }));\n    },\n    onTerminalReady: function()
    {\n        ws.send(action(\"TERMINAL_READY\"));\n    }\n};\n"
kind: ConfigMap
metadata:
  name: webpage-cloudterminal-config
  namespace: kube-system
