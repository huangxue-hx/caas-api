<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.harmonycloud.dao.application.LogBackupRuleMapper">
  <resultMap id="BaseResultMap" type="com.harmonycloud.dao.application.bean.LogBackupRule">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="cluster_id" jdbcType="VARCHAR" property="clusterId" />
    <result column="backup_dir" jdbcType="VARCHAR" property="backupDir" />
    <result column="days_before" jdbcType="INTEGER" property="daysBefore" />
    <result column="days_duration" jdbcType="INTEGER" property="daysDuration" />
    <result column="max_snapshot_speed" jdbcType="VARCHAR" property="maxSnapshotSpeed" />
    <result column="max_restore_speed" jdbcType="VARCHAR" property="maxRestoreSpeed" />
    <result column="last_backup_time" jdbcType="TIMESTAMP" property="lastBackupTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="available" jdbcType="BIT" property="available" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, cluster_id, backup_dir, days_before, days_duration, max_snapshot_speed, max_restore_speed, 
    last_backup_time, create_time, update_time, available
  </sql>
  <select id="selectByExample" parameterType="com.harmonycloud.dao.application.bean.LogBackupRuleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from log_backup_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from log_backup_rule
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from log_backup_rule
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.harmonycloud.dao.application.bean.LogBackupRuleExample">
    delete from log_backup_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteByClusterId">
    delete from log_backup_rule where cluster_id = #{clusterId}
  </delete>
  <insert id="insert" parameterType="com.harmonycloud.dao.application.bean.LogBackupRule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into log_backup_rule (cluster_id, backup_dir, days_before, 
      days_duration, max_snapshot_speed, max_restore_speed, 
      create_time, update_time, available
      )
    values (#{clusterId,jdbcType=VARCHAR}, #{backupDir,jdbcType=VARCHAR}, #{daysBefore,jdbcType=INTEGER}, 
      #{daysDuration,jdbcType=INTEGER}, #{maxSnapshotSpeed,jdbcType=VARCHAR}, #{maxRestoreSpeed,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{available,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.harmonycloud.dao.application.bean.LogBackupRule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into log_backup_rule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="clusterId != null">
        cluster_id,
      </if>
      <if test="backupDir != null">
        backup_dir,
      </if>
      <if test="daysBefore != null">
        days_before,
      </if>
      <if test="daysDuration != null">
        days_duration,
      </if>
      <if test="maxSnapshotSpeed != null">
        max_snapshot_speed,
      </if>
      <if test="maxRestoreSpeed != null">
        max_restore_speed,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="available != null">
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="clusterId != null">
        #{clusterId,jdbcType=VARCHAR},
      </if>
      <if test="backupDir != null">
        #{backupDir,jdbcType=VARCHAR},
      </if>
      <if test="daysBefore != null">
        #{daysBefore,jdbcType=INTEGER},
      </if>
      <if test="daysDuration != null">
        #{daysDuration,jdbcType=INTEGER},
      </if>
      <if test="maxSnapshotSpeed != null">
        #{maxSnapshotSpeed,jdbcType=VARCHAR},
      </if>
      <if test="maxRestoreSpeed != null">
        #{maxRestoreSpeed,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="available != null">
        #{available,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.harmonycloud.dao.application.bean.LogBackupRule">
    update log_backup_rule
    <set>
      <if test="clusterId != null">
        cluster_id = #{clusterId,jdbcType=VARCHAR},
      </if>
      <if test="backupDir != null">
        backup_dir = #{backupDir,jdbcType=VARCHAR},
      </if>
      <if test="daysBefore != null">
        days_before = #{daysBefore,jdbcType=INTEGER},
      </if>
      <if test="daysDuration != null">
        days_duration = #{daysDuration,jdbcType=INTEGER},
      </if>
      <if test="maxSnapshotSpeed != null">
        max_snapshot_speed = #{maxSnapshotSpeed,jdbcType=VARCHAR},
      </if>
      <if test="maxRestoreSpeed != null">
        max_restore_speed = #{maxRestoreSpeed,jdbcType=VARCHAR},
      </if>
      <if test="lastBackupTime != null">
        last_backup_time = #{lastBackupTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.harmonycloud.dao.application.bean.LogBackupRule">
    update log_backup_rule
    set cluster_id = #{clusterId,jdbcType=VARCHAR},
      backup_dir = #{backupDir,jdbcType=VARCHAR},
      days_before = #{daysBefore,jdbcType=INTEGER},
      days_duration = #{daysDuration,jdbcType=INTEGER},
      max_snapshot_speed = #{maxSnapshotSpeed,jdbcType=VARCHAR},
      max_restore_speed = #{maxRestoreSpeed,jdbcType=VARCHAR},
      last_backup_time = #{lastBackupTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      available = #{available,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>