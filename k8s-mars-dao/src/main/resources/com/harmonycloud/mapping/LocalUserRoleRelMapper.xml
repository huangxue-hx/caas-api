<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.harmonycloud.dao.user.LocalUserRoleRelMapper">
  <resultMap id="BaseResultMap" type="com.harmonycloud.dao.user.bean.LocalUserRoleRel">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="project_id" jdbcType="VARCHAR" property="projectId" />
    <result column="local_role_id" jdbcType="INTEGER" property="localRoleId" />
    <result column="has_local_role" jdbcType="BIT" property="hasLocalRole" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="available" jdbcType="BIT" property="available" />
    <result column="reserve1" jdbcType="VARCHAR" property="reserve1" />
    <result column="reserve2" jdbcType="VARCHAR" property="reserve2" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_name, project_id, local_role_id, has_local_role, create_time, update_time, 
    available, reserve1, reserve2
  </sql>
  <select id="selectByExample" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from local_user_role_relationship
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from local_user_role_relationship
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from local_user_role_relationship
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRelExample">
    delete from local_user_role_relationship
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into local_user_role_relationship (user_name, project_id, local_role_id, 
      has_local_role, create_time, update_time, 
      available, reserve1, reserve2
      )
    values (#{userName,jdbcType=VARCHAR}, #{projectId,jdbcType=VARCHAR}, #{localRoleId,jdbcType=INTEGER}, 
      #{hasLocalRole,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{available,jdbcType=BIT}, #{reserve1,jdbcType=VARCHAR}, #{reserve2,jdbcType=VARCHAR}
      )
  </insert>

  <insert id="batchInsert" parameterType="java.util.List" >
    insert into local_user_role_relationship (user_name, project_id, local_role_id,
    has_local_role, create_time, update_time,
    available, reserve1, reserve2
    )
    values
    <foreach collection="records" item="record" index="index" separator=",">
      (#{record.userName,jdbcType=VARCHAR}, #{record.projectId,jdbcType=VARCHAR}, #{record.localRoleId,jdbcType=INTEGER},
      #{record.hasLocalRole,jdbcType=BIT}, #{record.createTime,jdbcType=TIMESTAMP}, #{record.updateTime,jdbcType=TIMESTAMP},
      #{record.available,jdbcType=BIT}, #{record.reserve1,jdbcType=VARCHAR}, #{record.reserve2,jdbcType=VARCHAR})
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into local_user_role_relationship
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        user_name,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="localRoleId != null">
        local_role_id,
      </if>
      <if test="hasLocalRole != null">
        has_local_role,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="available != null">
        available,
      </if>
      <if test="reserve1 != null">
        reserve1,
      </if>
      <if test="reserve2 != null">
        reserve2,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="localRoleId != null">
        #{localRoleId,jdbcType=INTEGER},
      </if>
      <if test="hasLocalRole != null">
        #{hasLocalRole,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="available != null">
        #{available,jdbcType=BIT},
      </if>
      <if test="reserve1 != null">
        #{reserve1,jdbcType=VARCHAR},
      </if>
      <if test="reserve2 != null">
        #{reserve2,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRel">
    update local_user_role_relationship
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="localRoleId != null">
        local_role_id = #{localRoleId,jdbcType=INTEGER},
      </if>
      <if test="hasLocalRole != null">
        has_local_role = #{hasLocalRole,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=BIT},
      </if>
      <if test="reserve1 != null">
        reserve1 = #{reserve1,jdbcType=VARCHAR},
      </if>
      <if test="reserve2 != null">
        reserve2 = #{reserve2,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.harmonycloud.dao.user.bean.LocalUserRoleRel">
    update local_user_role_relationship
    set user_name = #{userName,jdbcType=VARCHAR},
      project_id = #{projectId,jdbcType=VARCHAR},
      local_role_id = #{localRoleId,jdbcType=INTEGER},
      has_local_role = #{hasLocalRole,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      available = #{available,jdbcType=BIT},
      reserve1 = #{reserve1,jdbcType=VARCHAR},
      reserve2 = #{reserve2,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>